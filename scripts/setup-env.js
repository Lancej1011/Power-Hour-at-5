#!/usr/bin/env node

/**
 * Environment Setup Script for PHat5
 * Helps configure environment variables for building and releasing
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');
const envPath = path.join(projectRoot, '.env');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log('üöÄ PHat5 Environment Setup\n');
  console.log('This script will help you configure environment variables for building and releasing PHat5.\n');

  // Check if .env already exists
  let existingEnv = {};
  if (fs.existsSync(envPath)) {
    console.log('üìÅ Found existing .env file. Loading current values...\n');
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        existingEnv[key.trim()] = value.trim();
      }
    });
  }

  const config = {};

  // GitHub Token
  console.log('üêô GitHub Configuration');
  console.log('A GitHub Personal Access Token is required for automatic releases.');
  console.log('Create one at: https://github.com/settings/tokens\n');
  
  const currentGhToken = existingEnv.GH_TOKEN || '';
  const ghToken = await question(`GitHub Token (current: ${currentGhToken ? '***set***' : 'not set'}): `);
  if (ghToken.trim()) {
    config.GH_TOKEN = ghToken.trim();
  } else if (currentGhToken) {
    config.GH_TOKEN = currentGhToken;
  }

  // Code Signing Choice
  console.log('\nüîí Code Signing Configuration');
  console.log('Code signing makes your app trusted by operating systems.');
  console.log('You can skip this for testing and set it up later for production.\n');
  
  const skipSigning = await question('Skip code signing for now? (y/n) [y]: ');
  
  if (skipSigning.toLowerCase() === 'n' || skipSigning.toLowerCase() === 'no') {
    // Windows Code Signing
    console.log('\nü™ü Windows Code Signing');
    const currentCscLink = existingEnv.CSC_LINK || '';
    const currentCscPassword = existingEnv.CSC_KEY_PASSWORD || '';
    
    const cscLink = await question(`Certificate file path (current: ${currentCscLink || 'not set'}): `);
    if (cscLink.trim()) {
      config.CSC_LINK = cscLink.trim();
      const cscPassword = await question('Certificate password: ');
      if (cscPassword.trim()) {
        config.CSC_KEY_PASSWORD = cscPassword.trim();
      }
    } else if (currentCscLink) {
      config.CSC_LINK = currentCscLink;
      if (currentCscPassword) {
        config.CSC_KEY_PASSWORD = currentCscPassword;
      }
    }

    // macOS Code Signing
    console.log('\nüçé macOS Code Signing');
    const currentAppleId = existingEnv.APPLE_ID || '';
    const currentApplePassword = existingEnv.APPLE_ID_PASSWORD || '';
    const currentTeamId = existingEnv.APPLE_TEAM_ID || '';
    
    const appleId = await question(`Apple ID (current: ${currentAppleId || 'not set'}): `);
    if (appleId.trim()) {
      config.APPLE_ID = appleId.trim();
      const applePassword = await question('App-specific password: ');
      if (applePassword.trim()) {
        config.APPLE_ID_PASSWORD = applePassword.trim();
      }
      const teamId = await question(`Team ID (current: ${currentTeamId || 'not set'}): `);
      if (teamId.trim()) {
        config.APPLE_TEAM_ID = teamId.trim();
      }
    } else if (currentAppleId) {
      config.APPLE_ID = currentAppleId;
      if (currentApplePassword) {
        config.APPLE_ID_PASSWORD = currentApplePassword;
      }
      if (currentTeamId) {
        config.APPLE_TEAM_ID = currentTeamId;
      }
    }
  } else {
    // Skip code signing
    config.SKIP_CODE_SIGNING = 'true';
    config.SKIP_NOTARIZATION = 'true';
    console.log('‚úÖ Code signing will be skipped');
  }

  // Release Configuration
  console.log('\nüì¶ Release Configuration');
  const draftRelease = await question('Create draft releases by default? (y/n) [y]: ');
  if (draftRelease.toLowerCase() !== 'n' && draftRelease.toLowerCase() !== 'no') {
    config.DRAFT_RELEASE = 'true';
  }

  // Write .env file
  console.log('\nüíæ Writing configuration to .env file...');
  
  const envLines = [];
  envLines.push('# PHat5 Environment Configuration');
  envLines.push('# Generated by setup-env.js');
  envLines.push('');
  
  // GitHub
  envLines.push('# GitHub Configuration');
  if (config.GH_TOKEN) {
    envLines.push(`GH_TOKEN=${config.GH_TOKEN}`);
  } else {
    envLines.push('# GH_TOKEN=your_github_token_here');
  }
  envLines.push('');
  
  // Code Signing
  if (config.SKIP_CODE_SIGNING) {
    envLines.push('# Code Signing (Disabled)');
    envLines.push('SKIP_CODE_SIGNING=true');
    envLines.push('SKIP_NOTARIZATION=true');
  } else {
    envLines.push('# Windows Code Signing');
    if (config.CSC_LINK) {
      envLines.push(`CSC_LINK=${config.CSC_LINK}`);
      envLines.push(`CSC_KEY_PASSWORD=${config.CSC_KEY_PASSWORD}`);
    } else {
      envLines.push('# CSC_LINK=C:\\path\\to\\certificate.pfx');
      envLines.push('# CSC_KEY_PASSWORD=certificate_password');
    }
    envLines.push('');
    
    envLines.push('# macOS Code Signing');
    if (config.APPLE_ID) {
      envLines.push(`APPLE_ID=${config.APPLE_ID}`);
      envLines.push(`APPLE_ID_PASSWORD=${config.APPLE_ID_PASSWORD}`);
      envLines.push(`APPLE_TEAM_ID=${config.APPLE_TEAM_ID}`);
    } else {
      envLines.push('# APPLE_ID=your_apple_id@example.com');
      envLines.push('# APPLE_ID_PASSWORD=app_specific_password');
      envLines.push('# APPLE_TEAM_ID=your_team_id');
    }
  }
  envLines.push('');
  
  // Release Configuration
  envLines.push('# Release Configuration');
  if (config.DRAFT_RELEASE) {
    envLines.push('DRAFT_RELEASE=true');
  } else {
    envLines.push('# DRAFT_RELEASE=true');
  }
  
  fs.writeFileSync(envPath, envLines.join('\n'));
  
  console.log('‚úÖ Configuration saved to .env file');
  console.log('\nüéØ Next Steps:');
  console.log('1. Test your configuration:');
  console.log('   npm run electron:pack');
  console.log('');
  console.log('2. Create a test release:');
  console.log('   npm run release:draft');
  console.log('');
  console.log('3. For production releases:');
  console.log('   npm run release');
  console.log('');
  console.log('üìö For more information, see:');
  console.log('   - CODE_SIGNING_SETUP.md');
  console.log('   - INSTALLER_AND_UPDATER_GUIDE.md');
  
  rl.close();
}

main().catch(console.error);
